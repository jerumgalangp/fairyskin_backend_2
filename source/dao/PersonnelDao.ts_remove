import { PersonnelDaoCreateInterface, PersonnelDaoDeleteInterface, PersonnelDaoRestoreInterface, PersonnelDaoUpdateInterface } from 'source/interfaces/dao/PersonnelDaoInterface';
import { FindManyOptions, getRepository, InsertResult } from 'typeorm';
import { Entities } from '../constant/Entities';
import { HttpResponseType, HTTP_RESPONSES } from '../constant/HttpConstant';
import { PersonnelEntity } from '../entities/PersonnelEntities.ts_remove';
import { PaginationDaoInterface } from '../interfaces/dao/PaginationDaoInterface';
import { HeadersRouteInterface } from '../interfaces/routes/HttpRoutesInterface';

export const usePersonnelDao = () => {
    const getPersonnel = async (payload: { [column: string]: any }[], pagination: PaginationDaoInterface, headers: HeadersRouteInterface) => {
        try {
            let defaultSort = 'created_at';
            if (headers.sort_by !== undefined) defaultSort = headers.sort_by;

            let queries: FindManyOptions<PersonnelEntity> = {
                withDeleted: headers.withdeleted === 'true',
                order: { [defaultSort]: headers.sort ? (headers.sort === 'DESC' ? 'DESC' : 'ASC') : 'DESC' },
                skip: pagination.skip,
                take: pagination.take
            };

            if (payload.length > 0) queries = { ...queries, where: payload };

            const results = await PersonnelEntity.find(queries);
            const total = await PersonnelEntity.count(queries);

            return {
                ...HTTP_RESPONSES[HttpResponseType.Success],
                message: 'Successfully Retrieved data.',
                results,
                pagination: { total, current: pagination.current }
            };
        } catch (err) {
            console.log('Error Dao: Query for getPersonnelDao Transaction -> ', err);
            return {
                ...HTTP_RESPONSES[HttpResponseType.BadRequest],
                message: err.message
            };
        }
    };

    const createPersonnel = async (payload: PersonnelDaoCreateInterface) => {
        try {
            const query = getRepository(PersonnelEntity).createQueryBuilder(Entities.PERSONNEL).insert().into(PersonnelEntity).values(payload);
            const data: InsertResult = await query.execute();
            const { id } = data.identifiers[0];
            return { ...HTTP_RESPONSES[HttpResponseType.Created], id, message: 'Successfully created.' };
        } catch (err) {
            console.log('Error Dao: Create Personnel Transaction -> ', err);
            return {
                ...HTTP_RESPONSES[HttpResponseType.BadRequest],
                message: err.message
            };
        }
    };

    const updatePersonnel = async (id: string, payload: PersonnelDaoUpdateInterface) => {
        try {
            const query = getRepository(PersonnelEntity).createQueryBuilder(Entities.PERSONNEL).update(PersonnelEntity).set(payload).where('id = :id', { id });
            await query.execute();
            return { ...HTTP_RESPONSES[HttpResponseType.Updated], message: 'Successfully updated.' };
        } catch (err) {
            console.log('Error Dao: update Personnel -> ', err);
            return { ...HTTP_RESPONSES[HttpResponseType.BadRequest], message: err.message };
        }
    };

    const deletePersonnel = async (id: string, payload: PersonnelDaoDeleteInterface) => {
        try {
            await getRepository(PersonnelEntity).createQueryBuilder(Entities.PERSONNEL).update(PersonnelEntity).set(payload).where('id = :id', { id }).execute();
            await getRepository(PersonnelEntity).delete({ id });
            return { ...HTTP_RESPONSES[HttpResponseType.Deleted], message: 'Successfully deleted.' };
        } catch (err) {
            console.log('Error Dao: delete Personnel -> ', err);
            return { ...HTTP_RESPONSES[HttpResponseType.BadRequest], message: err.message };
        }
    };

    const restorePersonnel = async (id: string, payload: PersonnelDaoRestoreInterface) => {
        try {
            await getRepository(PersonnelEntity)
                .createQueryBuilder(Entities.PERSONNEL)
                .update(PersonnelEntity)
                .set({ ...payload, updated_at: new Date() })
                .where('id = :id', { id })
                .execute();
            await getRepository(PersonnelEntity).restore({ id });
            return { ...HTTP_RESPONSES[HttpResponseType.Restored], message: 'Successfully restored.' };
        } catch (err) {
            console.log('Error Dao: restorePersonnel -> ', err);
            return { ...HTTP_RESPONSES[HttpResponseType.BadRequest], message: err.message };
        }
    };

    return {
        getPersonnel,
        createPersonnel,
        updatePersonnel,
        deletePersonnel,
        restorePersonnel
    };
};
